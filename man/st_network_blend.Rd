% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/blend.R
\name{st_network_blend}
\alias{st_network_blend}
\title{Blend spatial points into a spatial network}
\usage{
st_network_blend(x, y, tolerance = Inf, ignore_duplicates = TRUE)
}
\arguments{
\item{x}{An object of class \code{\link{sfnetwork}}.}

\item{y}{The spatial features to be blended, either as object of class
\code{\link[sf]{sf}} or \code{\link[sf]{sfc}}, with \code{POINT} geometries.}

\item{tolerance}{The tolerance distance to be used. Only features that are
at least as close to the network as the tolerance distance will be blended.
Should be a non-negative number preferably given as an object of class
\code{\link[units]{units}}. Otherwise, it will be assumed that the unit is
meters. If set to \code{Inf} all features will be blended. Defaults to
\code{Inf}.}

\item{ignore_duplicates}{If there are multiple points in \code{y} that have
the same projected location, only the first one of them is blended into
the network. But what should happen with the others? If this argument is set
to \code{TRUE}, they will be ignored. If this argument is set to
\code{FALSE}, they will be added as isolated nodes to the returned network.
Nodes at equal locations can then be merged using the spatial morpher.
\code{\link{to_spatial_unique}}. Defaults to \code{TRUE}.}
}
\value{
The blended network as an object of class \code{\link{sfnetwork}}.
}
\description{
Blending a point into a network is the combined process of first projecting
the point onto its nearest point on its nearest edge in the network, then
subdividing that edge at the location of the projected point, and finally
adding the projected point as node to the network. If the location of the
projected point is equal an existing node in the network, the attributes of
the point will be joined to that node, instead of adding a new node.
}
\details{
When the projected location of a given point intersects with more
than one edge, it is only blended into the first of these edges. Edges are
not connected at blending locations. Use the spatial morpher
\code{\link{to_spatial_subdivision}} for that.

To determine if a projected point is equal to an existing node, and to
determine if multiple projected points are equal to each other, sfnetworks
by default rounds coordinates to 12 decimal places. You can influence this
behavior by explicitly setting the precision of the network using
\code{\link[sf]{st_set_precision}}.
}
\note{
Due to internal rounding of rational numbers, it may occur that the
intersection point between a line and a point is not evaluated as
actually intersecting that line by the designated algorithm. Instead, the
intersection point lies a tiny-bit away from the edge. Therefore, it is
recommended to set the tolerance to a very small number (for example 1e-5)
even if you only want to blend points that intersect an edge.
}
\examples{
library(sf, quietly = TRUE)

oldpar = par(no.readonly = TRUE)
par(mar = c(1,1,1,1), mfrow = c(1,2))

# Create a spatial network.
n1 = st_point(c(0, 0))
n2 = st_point(c(1, 0))
n3 = st_point(c(2, 0))

e1 = st_sfc(st_linestring(c(n1, n2)), crs = 3857)
e2 = st_sfc(st_linestring(c(n2, n3)), crs = 3857)

net = as_sfnetwork(c(e1, e2))

# Create spatial points to blend in.
p1 = c(st_point(c(0.5, 0.5)))
p2 = c(st_point(c(0.5, -1)))
p3 = c(st_point(c(1, 1)))
p4 = c(st_point(c(1.75, 1)))
p5 = c(st_point(c(1.25, 0.5)))

pts = st_sf(foo = letters[1:5], geometry = c(p1, p2, p3, p4, p5))

# Blend all points into the network.
b1 = st_network_blend(net, pts)
b1

plot(pts, pch = 20, col = "orange")
plot(net, add = TRUE)
plot(pts, pch = 20, col = "orange")
plot(b1, add = TRUE)

# Blend points within a tolerance distance.
tol = units::set_units(0.6, "m")
b2 = st_network_blend(net, pts, tolerance = tol)
b2

plot(pts, pch = 20, col = "orange")
plot(net, add = TRUE)
plot(pts, pch = 20, col = "orange")
plot(b2, add = TRUE)

# Add points with duplicated projected location as isolated nodes.
b3 = st_network_blend(net, pts, ignore_duplicates = FALSE)
b3

par(oldpar)

}
