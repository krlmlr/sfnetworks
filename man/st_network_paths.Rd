% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/paths.R
\name{st_network_paths}
\alias{st_network_paths}
\title{Find shortest paths between nodes in a spatial network}
\usage{
st_network_paths(
  x,
  from,
  to = node_ids(x),
  weights = edge_length(),
  all = FALSE,
  k = 1,
  direction = "out",
  use_names = TRUE,
  return_cost = TRUE,
  return_geometry = TRUE,
  ...
)
}
\arguments{
\item{x}{An object of class \code{\link{sfnetwork}}.}

\item{from}{The node where the paths should start. Evaluated by
\code{\link{evaluate_node_query}}. When multiple nodes are given, only the
first one is used.}

\item{to}{The nodes where the paths should end. Evaluated by
\code{\link{evaluate_node_query}}. By default, all nodes in the network are
included.}

\item{weights}{The edge weights to be used in the shortest path calculation.
Evaluated by \code{\link{evaluate_edge_spec}}. The default is
\code{\link{edge_length}}, which computes the geographic lengths of the
edges.}

\item{all}{Should all shortest paths be returned for each pair of nodes? If
set to \code{FALSE}, only one shortest path is returned for each pair of
nodes, even if multiple shortest paths exist. Defaults to \code{FALSE}.}

\item{k}{The number of paths to find. Setting this to any integer higher
than 1 returns not only the shortest path, but also the next k - 1 loopless
shortest paths, which may be longer than the shortest path. Currently, this
is only supported for one-to-one routing, meaning that both the from and to
argument should be of length 1. This argument is ignored if \code{all} is
set to \code{TRUE}.}

\item{direction}{The direction of travel. Defaults to \code{'out'}, meaning
that the direction given by the network is followed and paths are found from
the node given as argument \code{from}. May be set to \code{'in'}, meaning
that the opposite direction is followed an paths are found towards the node
given as argument \code{from}. May also be set to \code{'all'}, meaning that
the network is considered to be undirected. This argument is ignored for
undirected networks.}

\item{use_names}{If a column named \code{name} is present in the nodes
table, should these names be used to encode the nodes in a path, instead of
the node indices? Defaults to \code{TRUE}. Ignored when the nodes table does
not have a column named \code{name}.}

\item{return_cost}{Should the total cost of each path be computed? Defaults
to \code{TRUE}.}

\item{return_geometry}{Should a linestring geometry be constructed for each
path? Defaults to \code{TRUE}. The geometries are constructed by calling
\code{\link[sf]{st_line_merge}} on the linestring geometries of the edges in
the path. Ignored for networks with spatially implicit edges.}

\item{...}{Additional arguments passed on to the wrapped igraph functions.
Arguments \code{predecessors} and \code{inbound.edges} are ignored.
Instead of the \code{mode} argument, use the \code{direction} argument.}
}
\value{
An object of class \code{\link[sf]{sf}} with one row per requested
path. If \code{return_geometry = FALSE}, a \code{\link[tibble]{tbl_df}} is
returned instead. If a requested path could not be found, it is included in
the output as an empty path.

Depending on the argument settings, the output may include the following
columns:

\itemize{
  \item \code{from}: The index of the node at the start of the path.
  \item \code{to}: The index of the node at the end of the path.
  \item \code{nodes}: A vector containing the indices of all nodes on the
  path, in order of visit.
  \item \code{edges}: A vector containing the indices of all edges on the
  path, in order of visit.
  \item \code{path_found}: A boolean describing if the requested path exists.
  \item \code{cost}: The total cost of the path, obtained by summing the
  weights of all visited edges. Included if \code{return_cost = TRUE}.
  \item \code{geometry}: The geometry of the path, obtained by merging the
  geometries of all visited edges. Included if \code{return_geometry = TRUE}
  and the network has spatially explicit edges.
}
}
\description{
Find shortest paths between nodes in a spatial network
}
\details{
For more details on the wrapped igraph functions see the
\code{\link[igraph]{distances}} and \code{\link[igraph]{k_shortest_paths}}
documentation pages.
}
\examples{
library(sf, quietly = TRUE)
library(tidygraph, quietly = TRUE)

oldpar = par(no.readonly = TRUE)
par(mar = c(1,1,1,1))

net = as_sfnetwork(roxel, directed = FALSE) |>
  st_transform(3035)

# Compute the shortest path between two nodes.
# Note that geographic edge length is used as edge weights by default.
paths = st_network_paths(net, from = 495, to = 121)
paths

plot(net, col = "grey")
plot(st_geometry(paths), col = "red", lwd = 1.5, add = TRUE)

# Compute the shortest paths from one to multiple nodes.
# This will return a tibble with one row per path.
st_network_paths(net, from = 495, to = c(121, 131, 141))

# Compute the shortest path between two spatial point features.
# These are snapped to their nearest node before finding the path.
p1 = st_geometry(net, "nodes")[495] + st_sfc(st_point(c(50, -50)))
st_crs(p1) = st_crs(net)
p2 = st_geometry(net, "nodes")[121] + st_sfc(st_point(c(-10, 100)))
st_crs(p2) = st_crs(net)

paths = st_network_paths(net, from = p1, to = p2)
paths

plot(net, col = "grey")
plot(c(p1, p2), col = "black", pch = 8, add = TRUE)
plot(st_geometry(paths), col = "red", lwd = 1.5, add = TRUE)

# Use a node type query function to specify destinations.
st_network_paths(net, 1, node_is_adjacent(1))

# Use a spatial edge measure to specify edge weights.
# By default edge_length() is used.
st_network_paths(net, p1, p2, weights = edge_displacement())

# Use a column in the edges table to specify edge weights.
# This uses tidy evaluation.
net |>
  activate("edges") |>
  mutate(foo = runif(n(), min = 0, max = 1)) |>
  st_network_paths(p1, p2, weights = foo)

# Compute the shortest paths without edge weights.
# This is the path with the fewest number of edges, ignoring space.
st_network_paths(net, p1, p2, weights = NULL)

par(oldpar)

}
\seealso{
\code{\link{st_network_cost}}, \code{\link{st_network_travel}}
}
