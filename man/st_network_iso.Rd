% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/iso.R
\name{st_network_iso}
\alias{st_network_iso}
\title{Compute isolines around nodes in a spatial network}
\usage{
st_network_iso(
  x,
  node,
  cost,
  weights = edge_length(),
  ...,
  delineate = TRUE,
  ratio = 1,
  allow_holes = FALSE
)
}
\arguments{
\item{x}{An object of class \code{\link{sfnetwork}}.}

\item{node}{The node around which the isolines will be drawn. Evaluated by
\code{\link{evaluate_node_query}}. When multiple nodes are given, only the
first one is used.}

\item{cost}{The constant cost value of the isoline. Should be a numeric
value in the same units as the given edge weights. Alternatively, units can
be specified explicitly by providing a \code{\link[units]{units}} object.
Multiple values may be given, which will result in multiple isolines being
drawn.}

\item{weights}{The edge weights to be used in the shortest path calculation.
Evaluated by \code{\link{evaluate_weight_spec}}. The default is
\code{\link{edge_length}}, which computes the geographic lengths of the
edges.}

\item{...}{Additional arguments passed on to \code{\link{st_network_cost}}
to compute the cost matrix from the specified node to all other nodes in the
network.}

\item{delineate}{Should the nodes inside the isoline be delineated? If
\code{FALSE}, the nodes inside the isoline are returned as a
\code{MULTIPOINT} geometry. If \code{TRUE}, the concave hull of that
geometry is returned instead. Defaults to \code{TRUE}.}

\item{ratio}{The ratio of the concave hull. Defaults to \code{1}, meaning
that the convex hull is computed. See \code{\link[sf]{st_concave_hull}} for
details. Ignored if \code{delineate = FALSE}. Setting this to a value
smaller than 1 requires a GEOS version of at least 3.11.}

\item{allow_holes}{May the concave hull have holes? Defaults to \code{FALSE}.
Ignored if \code{delineate = FALSE}.}
}
\value{
An object of class \code{\link[sf]{sf}} with one row per requested
isoline. The object contains the following columns:

\itemize{
  \item \code{cost}: The constant cost value of the isoline.
  \item \code{geometry}: If \code{delineate = TRUE}, the concave hull of all
  nodes that lie inside the isoline. Otherwise, those nodes combined into a
  single \code{MULTIPOINT} geometry.
}
}
\description{
Isolines are curves along which a function has a constant value. In spatial
networks, they are used to delineate areas that are reachable from a given
node within a given travel cost. If the travel cost is distance, they are
known as isodistances, while if the travel cost is time, they are known as
isochrones. This function finds all network nodes that lie inside an isoline
around a specified node.
}
\examples{
library(sf, quietly = TRUE)

oldpar = par(no.readonly = TRUE)
par(mar = c(1,1,1,1))

center = st_centroid(st_combine(st_geometry(roxel)))

net = as_sfnetwork(roxel, directed = FALSE)

iso = net |>
  st_network_iso(node_is_nearest(center), c(1000, 500, 250))

colors = c("#fee6ce90", "#fdae6b90", "#e6550d90")

plot(net)
plot(st_geometry(iso), col = colors, add = TRUE)

# The level of detail can be increased with the ratio argument.
# This requires GEOS >= 3.11.
if (compareVersion(sf_extSoftVersion()[["GEOS"]], "3.11.0") > -1) {

  iso = net |>
    st_network_iso(node_is_nearest(center), c(1000, 500, 250), ratio = 0.3)

  colors = c("#fee6ce90", "#fdae6b90", "#e6550d90")

  plot(net)
  plot(st_geometry(iso), col = colors, add = TRUE)
}

par(oldpar)

}
